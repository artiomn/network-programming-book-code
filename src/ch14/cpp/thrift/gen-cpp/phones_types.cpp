/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "phones_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kPhoneTypeValues[] = {
  PhoneType::HOME,
  PhoneType::WORK,
  PhoneType::MOBILE,
  PhoneType::OTHER
};
const char* _kPhoneTypeNames[] = {
  "HOME",
  "WORK",
  "MOBILE",
  "OTHER"
};
const std::map<int, const char*> _PhoneType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPhoneTypeValues, _kPhoneTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const PhoneType::type& val) {
  std::map<int, const char*>::const_iterator it = _PhoneType_VALUES_TO_NAMES.find(val);
  if (it != _PhoneType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const PhoneType::type& val) {
  std::map<int, const char*>::const_iterator it = _PhoneType_VALUES_TO_NAMES.find(val);
  if (it != _PhoneType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Phone::~Phone() noexcept {
}


void Phone::__set_id(const int32_t val) {
  this->id = val;
}

void Phone::__set_number(const std::string& val) {
  this->number = val;
}

void Phone::__set_type(const PhoneType::type val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const Phone& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Phone::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = static_cast<PhoneType::type>(ecast0);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Phone::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Phone");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Phone &a, Phone &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.number, b.number);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

Phone::Phone(const Phone& other1) {
  id = other1.id;
  number = other1.number;
  type = other1.type;
  __isset = other1.__isset;
}
Phone& Phone::operator=(const Phone& other2) {
  id = other2.id;
  number = other2.number;
  type = other2.type;
  __isset = other2.__isset;
  return *this;
}
void Phone::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Phone(";
  out << "id=" << to_string(id);
  out << ", " << "number=" << to_string(number);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


