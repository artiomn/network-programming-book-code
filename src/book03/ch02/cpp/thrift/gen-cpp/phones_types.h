/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef phones_TYPES_H
#define phones_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct PhoneType {
  enum type {
    HOME = 0,
    WORK = 1,
    MOBILE = 2,
    OTHER = 3
  };
};

extern const std::map<int, const char*> _PhoneType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PhoneType::type& val);

std::string to_string(const PhoneType::type& val);

class Phone;

typedef struct _Phone__isset {
  _Phone__isset() : id(false), number(false), type(false) {}
  bool id :1;
  bool number :1;
  bool type :1;
} _Phone__isset;

class Phone : public virtual ::apache::thrift::TBase {
 public:

  Phone(const Phone&);
  Phone& operator=(const Phone&);
  Phone() noexcept
        : id(0),
          number(),
          type(static_cast<PhoneType::type>(0)) {
  }

  virtual ~Phone() noexcept;
  int32_t id;
  std::string number;
  /**
   * 
   * @see PhoneType
   */
  PhoneType::type type;

  _Phone__isset __isset;

  void __set_id(const int32_t val);

  void __set_number(const std::string& val);

  void __set_type(const PhoneType::type val);

  bool operator == (const Phone & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(number == rhs.number))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const Phone &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Phone & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Phone &a, Phone &b);

std::ostream& operator<<(std::ostream& out, const Phone& obj);



#endif
