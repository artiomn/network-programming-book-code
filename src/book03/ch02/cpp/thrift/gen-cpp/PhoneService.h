/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PhoneService_H
#define PhoneService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "phones_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PhoneServiceIf {
 public:
  virtual ~PhoneServiceIf() {}
  virtual void findById(Phone& _return, const int32_t id) = 0;
  virtual void findAll(std::vector<Phone> & _return) = 0;
};

class PhoneServiceIfFactory {
 public:
  typedef PhoneServiceIf Handler;

  virtual ~PhoneServiceIfFactory() {}

  virtual PhoneServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PhoneServiceIf* /* handler */) = 0;
  };

class PhoneServiceIfSingletonFactory : virtual public PhoneServiceIfFactory {
 public:
  PhoneServiceIfSingletonFactory(const ::std::shared_ptr<PhoneServiceIf>& iface) : iface_(iface) {}
  virtual ~PhoneServiceIfSingletonFactory() {}

  virtual PhoneServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(PhoneServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<PhoneServiceIf> iface_;
};

class PhoneServiceNull : virtual public PhoneServiceIf {
 public:
  virtual ~PhoneServiceNull() {}
  void findById(Phone& /* _return */, const int32_t /* id */) override {
    return;
  }
  void findAll(std::vector<Phone> & /* _return */) override {
    return;
  }
};

typedef struct _PhoneService_findById_args__isset {
  _PhoneService_findById_args__isset() : id(false) {}
  bool id :1;
} _PhoneService_findById_args__isset;

class PhoneService_findById_args {
 public:

  PhoneService_findById_args(const PhoneService_findById_args&) noexcept;
  PhoneService_findById_args& operator=(const PhoneService_findById_args&) noexcept;
  PhoneService_findById_args() noexcept
                             : id(0) {
  }

  virtual ~PhoneService_findById_args() noexcept;
  int32_t id;

  _PhoneService_findById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const PhoneService_findById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PhoneService_findById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhoneService_findById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PhoneService_findById_pargs {
 public:


  virtual ~PhoneService_findById_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PhoneService_findById_result__isset {
  _PhoneService_findById_result__isset() : success(false) {}
  bool success :1;
} _PhoneService_findById_result__isset;

class PhoneService_findById_result {
 public:

  PhoneService_findById_result(const PhoneService_findById_result&);
  PhoneService_findById_result& operator=(const PhoneService_findById_result&);
  PhoneService_findById_result() noexcept {
  }

  virtual ~PhoneService_findById_result() noexcept;
  Phone success;

  _PhoneService_findById_result__isset __isset;

  void __set_success(const Phone& val);

  bool operator == (const PhoneService_findById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhoneService_findById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhoneService_findById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PhoneService_findById_presult__isset {
  _PhoneService_findById_presult__isset() : success(false) {}
  bool success :1;
} _PhoneService_findById_presult__isset;

class PhoneService_findById_presult {
 public:


  virtual ~PhoneService_findById_presult() noexcept;
  Phone* success;

  _PhoneService_findById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PhoneService_findAll_args {
 public:

  PhoneService_findAll_args(const PhoneService_findAll_args&) noexcept;
  PhoneService_findAll_args& operator=(const PhoneService_findAll_args&) noexcept;
  PhoneService_findAll_args() noexcept {
  }

  virtual ~PhoneService_findAll_args() noexcept;

  bool operator == (const PhoneService_findAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PhoneService_findAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhoneService_findAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PhoneService_findAll_pargs {
 public:


  virtual ~PhoneService_findAll_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PhoneService_findAll_result__isset {
  _PhoneService_findAll_result__isset() : success(false) {}
  bool success :1;
} _PhoneService_findAll_result__isset;

class PhoneService_findAll_result {
 public:

  PhoneService_findAll_result(const PhoneService_findAll_result&);
  PhoneService_findAll_result& operator=(const PhoneService_findAll_result&);
  PhoneService_findAll_result() noexcept {
  }

  virtual ~PhoneService_findAll_result() noexcept;
  std::vector<Phone>  success;

  _PhoneService_findAll_result__isset __isset;

  void __set_success(const std::vector<Phone> & val);

  bool operator == (const PhoneService_findAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhoneService_findAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhoneService_findAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PhoneService_findAll_presult__isset {
  _PhoneService_findAll_presult__isset() : success(false) {}
  bool success :1;
} _PhoneService_findAll_presult__isset;

class PhoneService_findAll_presult {
 public:


  virtual ~PhoneService_findAll_presult() noexcept;
  std::vector<Phone> * success;

  _PhoneService_findAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PhoneServiceClient : virtual public PhoneServiceIf {
 public:
  PhoneServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PhoneServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void findById(Phone& _return, const int32_t id) override;
  void send_findById(const int32_t id);
  void recv_findById(Phone& _return);
  void findAll(std::vector<Phone> & _return) override;
  void send_findAll();
  void recv_findAll(std::vector<Phone> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PhoneServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<PhoneServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (PhoneServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_findById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PhoneServiceProcessor(::std::shared_ptr<PhoneServiceIf> iface) :
    iface_(iface) {
    processMap_["findById"] = &PhoneServiceProcessor::process_findById;
    processMap_["findAll"] = &PhoneServiceProcessor::process_findAll;
  }

  virtual ~PhoneServiceProcessor() {}
};

class PhoneServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PhoneServiceProcessorFactory(const ::std::shared_ptr< PhoneServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< PhoneServiceIfFactory > handlerFactory_;
};

class PhoneServiceMultiface : virtual public PhoneServiceIf {
 public:
  PhoneServiceMultiface(std::vector<std::shared_ptr<PhoneServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PhoneServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<PhoneServiceIf> > ifaces_;
  PhoneServiceMultiface() {}
  void add(::std::shared_ptr<PhoneServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void findById(Phone& _return, const int32_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findById(_return, id);
    }
    ifaces_[i]->findById(_return, id);
    return;
  }

  void findAll(std::vector<Phone> & _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAll(_return);
    }
    ifaces_[i]->findAll(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PhoneServiceConcurrentClient : virtual public PhoneServiceIf {
 public:
  PhoneServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  PhoneServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void findById(Phone& _return, const int32_t id) override;
  int32_t send_findById(const int32_t id);
  void recv_findById(Phone& _return, const int32_t seqid);
  void findAll(std::vector<Phone> & _return) override;
  int32_t send_findAll();
  void recv_findAll(std::vector<Phone> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
