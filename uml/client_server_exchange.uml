@startuml

Клиент -> Клиент : socket() - создать новый сокет
Клиент -> Клиент : getaddrinfo() - получить адрес сервера

Сервер -> Сервер : socket() - создать новый сокет
Сервер -> Сервер : getaddrinfo() - получить локальный адрес
Сервер -> Сервер : bind() - присвоить сокету адрес
Сервер -> Сервер : listen() - создать очередь входящих соединений
Сервер -> Сервер : accept() - ожидать подключение

Клиент -> Сервер : connect() - инициировать соединение
Сервер -> Сервер : accept() вернул новый сокет для обмена данными с клиентом

group Прикладной протокол
  Клиент <- Сервер : send() - "представиться" клиенту
  Клиент -> Клиент : recv() - прочитать баннер сервера
  loop Цикл "запрос-ответ"
    Сервер -> Сервер : recv() - ожидать запрос
    Клиент -> Сервер : send() - отправить запрос
    Сервер -> Сервер : обработать запрос
    Клиент -> Клиент : recv() - ожидать результат
    Сервер -> Клиент : send() - отправить результат
  end
end

Клиент -> Сервер : close() - закрыть соединение
Клиент -> Клиент : ожидать подтверждения
Сервер -> Клиент : close() - закрыть соединение

@enduml
